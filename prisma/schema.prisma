// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model Player {
  player_id         Int       @id @default(autoincrement())
  first_name        String    @db.VarChar(50)
  last_name         String    @db.VarChar(50)
  username          String    @unique @db.VarChar(50)
  email             String    @unique @db.VarChar(255)
  password          String   @db.VarChar(255)
  Date_of_birth     DateTime  @db.Date
  preferred_pronouns String  @db.VarChar(50)
  zip_code           String   @db.VarChar(5)
  photo              String    @db.VarChar(500)

  playerProfile PlayerProfile?
  dislikedPlayer DislikedProfile[] @relation("dislikedprofiles_disliked_player_idToplayer")

  dislikingPlayer DislikedProfile[] @relation("dislikedprofiles_player_idToplayer")

  likedPlayer LikedProfile[] @relation("likedprofiles_liked_player_idToplayer") 
  likingPlayer LikedProfile[] @relation("likedprofiles_player_idToplayer")

  matchedprofiles_as_player_id_1 MatchedProfile[] @relation("matchedprofiles_player_id_1Toplayer")

  matchedprofiles_as_player_id_2 MatchedProfile[] @relation("matchedprofiles_player_id_2Toplayer")
}

model PlayerProfile {
  profile_id               Int       @id @default(autoincrement())
  player_id                Int       @unique
  top_games                String?   @db.VarChar(255)
  favorite_gaming_device   String?   @db.VarChar(100)
  biggest_gaming_pet_peeve String?   @db.VarChar(255)
  looking_for              String?   @db.VarChar(255)
    player                Player @relation(fields: [player_id], references: [player_id])
}


model DislikedProfile {
  player_id            Int
  disliked_player_id   Int
  player_dislikedprofiles_disliked_player_idToplayer Player   @relation("dislikedprofiles_disliked_player_idToplayer", fields: [disliked_player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  player_dislikedprofiles_player_idToplayer          Player   @relation("dislikedprofiles_player_idToplayer", fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id, disliked_player_id])
}

model LikedProfile {
  player_id            Int
  liked_player_id      Int
  player_likedprofiles_liked_player_idToplayer  Player   @relation("likedprofiles_liked_player_idToplayer", fields: [liked_player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  player_likedprofiles_player_idToplayer   Player   @relation("likedprofiles_player_idToplayer", fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id, liked_player_id])
}

model MatchedProfile {
  player_id_1          Int
  player_id_2          Int
  player_matchedprofiles_player_id_1Toplayer Player   @relation("matchedprofiles_player_id_1Toplayer", fields: [player_id_1], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  player_matchedprofiles_player_id_2Toplayer Player   @relation("matchedprofiles_player_id_2Toplayer", fields: [player_id_2], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id_1, player_id_2])
  

}